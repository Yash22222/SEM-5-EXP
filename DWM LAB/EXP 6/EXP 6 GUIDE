EXPERIMENT NO 6 

AIM:- Using open source tools Implement Clustering Algorithms

THEORY:- 
Lets Understand How We Performed This 

1. Import Libraries:-
     - Import the necessary libraries for data generation, clustering, and visualization:
     - `numpy`: For numerical operations.
     - `matplotlib.pyplot`: For data visualization.
     - `KMeans` from `sklearn.cluster`: For performing K-Means clustering.
     - `make_blobs` from `sklearn.datasets`: For generating synthetic data.

2. Generate Synthetic Data:-
     - Define parameters for generating synthetic data:
     - `n_samples`: Number of data points.
     - `n_features`: Number of features for each data point (set to 2).
     - `n_clusters`: Number of clusters to generate (set to 3).
     - Generate synthetic data points using `make_blobs` and store them in the variable `X`. The `_` variable is used to ignore the cluster labels generated by `make_blobs` since we're performing unsupervised clustering.

3. Initialize and Fit K-Means:-
   - Initialize a K-Means clustering model with the desired number of clusters (`n_clusters`).
   - Fit the K-Means model to the synthetic data using `kmeans.fit(X)`.

4. Get Cluster Labels and Cluster Centers:-
   - Retrieve the cluster labels for each data point using `kmeans.labels_`. This assigns each data point to a cluster.
   - Get the coordinates of the cluster centers using `kmeans.cluster_centers_`.

5. Plot the Data Points and Cluster Centers:-
   - Create a new Matplotlib figure with a specified size using `plt.figure(figsize=(8, 6))`.

6. Create Lists for Legend:-
   - Create two empty lists: `legend_handles` and `legend_labels`. These lists will be used to collect handles (references to plotted elements) and labels for the legend.

7. Plot Data Points with Labels:- 
     - Loop through each cluster:
     - Use a scatter plot to display data points that belong to the current cluster.
     - Append the handles of the scatter plot (returned by `plt.scatter`) to `legend_handles`.
     - Append the label for the cluster to `legend_labels`. The label is of the form `'Cluster {i+1}'` to indicate the cluster number.

8. Plot Cluster Centers with Labels:-
     - Loop through each cluster center:
     - Use a scatter plot to display the cluster center as a red 'x' marker.
     - Append the handles of the scatter plot to `legend_handles`.
     - Append the label for the cluster center to `legend_labels`. The label is of the form `'Centroid {i+1}'` to indicate the centroid number.

9. Set Title and Labels:
   - Set the title of the plot to 'K-Means Clustering'.
   - Set labels for the x-axis and y-axis using `plt.xlabel` and `plt.ylabel`.

10. Create Legend:
    - Create the legend using `plt.legend(legend_handles, legend_labels)`. This associates the handles (plot elements) with their corresponding labels.

11. Show Plot:
    - Display the plot using `plt.show()`.

By collecting handles and labels for the legend and using `plt.legend`, this code ensures that the legend is correctly associated with the data points and cluster centers, addressing the "No artists with labels found to put in legend" warning. 
The resulting plot will display data points colored by cluster and cluster centers labeled with cluster numbers.4

CONCLUSION:-

Here We Successfully Implemented Clustering Algorithms.
